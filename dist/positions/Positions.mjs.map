{"version":3,"sources":["../../src/positions/Positions.mjs"],"names":["DataSeries","Instrument","Positions","getPositions","entry","positionsOnly","Map","key","positionInformation","set"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,2BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA;;;;;;;;;AAQA,eAAe,MAAMC,SAAN,SAAwBF,UAAxB,CAAmC;AAE9C;;;;;AAKAG,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChB,UAAMC,aAAa,GAAG,IAAIC,GAAJ,EAAtB,CADgB,CAEhB;;AACA,QAAI,CAACF,KAAL,EAAY,OAAOC,aAAP;;AACZ,SAAK,MAAM,CAACE,GAAD,EAAMC,mBAAN,CAAX,IAAyCJ,KAAzC,EAAgD;AAC5C;AACA,UAAIG,GAAG,YAAYN,UAAnB,EAA+B;AAC3BI,QAAAA,aAAa,CAACI,GAAd,CAAkBF,GAAlB,EAAuBC,mBAAvB;AACH;AACJ;;AACD,WAAOH,aAAP;AACH;;AAlB6C","sourcesContent":["import DataSeries from '../data-series/DataSeries';\nimport Instrument from '../instrument/Instrument';\n\n/**\n * Wrapper around TransformableDataSeries with some utilities that are only required by\n * positions.\n * Positions is a DataSeries where each entry has the following fields:\n * - date\n * - type (open/close)\n * - instrument with position details\n */\nexport default class Positions extends DataSeries {\n\n    /**\n     * Returns all position fields of head, i.e. all Map entries that do have an Instrument as a\n     * key\n     * @return {Map} - Map with Instrument as a key and position information as value\n     */\n    getPositions(entry) {\n        const positionsOnly = new Map();\n        // If DataSeries has no entries, return empty Map\n        if (!entry) return positionsOnly;\n        for (const [key, positionInformation] of entry) {\n            // Don't return or add keys for date and type\n            if (key instanceof Instrument) {\n                positionsOnly.set(key, positionInformation);\n            }\n        }\n        return positionsOnly;\n    }\n\n}\n"],"file":"Positions.mjs"}