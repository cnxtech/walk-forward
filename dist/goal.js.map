{"version":3,"sources":["../src/goal.js"],"names":["Backtest","run","rejectOnFalse","runThrough","TransformableDataSeries","instrumentType","BacktestCSVSource","SMA","SMAAlgo","Algorithm","constructor","field","fastSma","slowSma","instrumentAdded","instrument","slowSMAKey","addTransformer","fastSMAKey","onClose","orders","head","fastSmaKey","slowSmaKey","push","EqualPositionSize","data","backtest","forEach","order","size","account","cash","length","RunMonthly","now","date","monthChange","latestDate","getMonth","RebalancePositions","next","positions","position","TargetPositions","OrderTransformer","serial","strategies","result","targetPositions","strategy","setResult","setData","datum","on","item","callNextStrategy","Sum","setDataSource","name","substr","addOptimization","setInstrumentConfiguration","AAPL","type","stock","margin","setConfiguration","commission","slippage","open","setStrategies","params","Date","save"],"mappings":"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","sourcesContent":["import Backtest, { \n\trun, \n\trejectOnFalse,\n\trunThrough, \n\tTransformableDataSeries,\n\tinstrumentType,\n} from './src/backtest/Backtest';\nimport BacktestCSVSource from './src/csv-reader/CSVReader';\nimport SMA from './src/indicators/SMA';\n\n\n\n// Backtest exposes:\n// - account\n// - (orders)\n// - positions\n// - instruments\n\n\n\n\n\n/**\n* Buy instruments when fast SMA crosses the slow SMA.slowSmaKey.\n* @param {integer} fastSma\t\tPeriod for the fast SMA\n* @param {integer} slowSma\t\tPeriod for the slow SMA\n*/\nclass SMAAlgo extends Algorithm {\n\tconstructor(field, fastSma, slowSma) {\n\t\tsuper();\n\t\tthis.field = field;\n\t\tthis.fastSma = fastSma;\n\t\tthis.slowSma = slowSma;\n\t}\n\n\t/**\n\t* afterInstrumentAdded is always called after an instrument was initialized and added to the\n\t* backtest. This is the place to add transformers to any instrument. \n\t*/\n\tinstrumentAdded(instrument) {\n\t\tthis.slowSMAKey = instrument.addTransformer([this.field], new SMA(this.fastSma));\n\t\tthis.fastSMAKey = instrument.addTransformer([this.field], new SMA(this.slowSma));\n\t}\n\n\t/**\n\t* afterInstrumentBarClosed is called whenever any instrument gets new close data (which\n\t* includes lows and highs). This is the place to build your orders. \n\t* @param {TransformableDataSeries} instrument\n\t* @param {array} orders\n\t*/\n\tonClose(orders, instrument) {\n\t\tif (instrument.head()[this.fastSmaKey] > instrument.head()[this.slowSmaKey]) {\n\t\t\torders.push(instrument);\n\t\t}\n\t\treturn orders;\n\t}\n}\n\n\n\n/**\n* Divides available amount equally between all orders. If amount available (backtest.account.cash)\n* is $10k and 4 orders are open, each position will be allocated $2.5k.\n*/\nclass EqualPositionSize extends Algorithm {\n\t// backtest: \n\t// backtest.account\n\t// backtest.positions\n\tonClose(orders, data, instrument, backtest) {\n\t\torders.forEach((order) => {\n\t\t\torder.size = backtest.account.cash / orders.length / order.instrument.head()['open'];\n\t\t});\n\t\treturn orders;\n\t}\n\n}\n\n\nclass Algorithm {}\n\n\n\n// Monthly rebalanncing\nclass RunMonthly extends Algorithm {\n\tonClose(orders, instrument) {\n\t\t// Return false if latestDate was not set (first call); else return true on month change\n\t\tconst now = instrument.head().date;\n\t\tconst monthChange = !this.latestDate || now.getMonth() !== this.latestDate.getMonth();\n\t\tthis.latestDate = now;\n\t\t// If false is returned, strategy is halted; else it continues\n\t\treturn monthChange ? orders : false;\n\t}\n}\n\n\n// Algorithm class provides:\n// - positions\n// - account\nclass RebalancePositions extends Algorithm {\n\t// Add every existing position to orders so that it can be rebalanced\n\tnext(orders, instrument, backtest) {\n\t\tbacktest.positions.forEach((position) => {\n\t\t\torders.push({ instrument: position.instrument });\n\t\t});\n\t\treturn orders;\n\t}\n}\n\n\n\n\n\n\n\n\n// Dummy code for serial\n\nclass TargetPositions {}\nclass OrderTransformer {}\n\nfunction serial(strategies, data) {\n\tconst result = new TransformableDataSeries();\n\tconst targetPositions = new TargetPositions();\n\t\n\tstrategies.forEach((strategy) => {\n\t\tstrategy.setResult(result);\n\t\tstrategy.setData(data);\n\t});\n\n\t// We need to rewrite the transformers: halt on «return false», \n\tdata.forEach((datum) => {\n\t\tdatum.on('data', (item) => {\n\t\t\tconst result = strategy.next(item, targetPositions);\n\t\t\tif (!result) return;\n\t\t\telse callNextStrategy();\n\t\t});\n\t});\n\n\tfunction callNextStrategy() {\n\t\t// At the end:\n\t\tdata.addTransformer(new OrderTransformer(targetPositions));\n\t}\n\treturn result;\n}\n\n\nclass Sum {}\n\n\n\n(async () => {\n\n\t// Has stream, accounts, optimizations\n\tconst backtest = new Backtest();\n\t\n\t// First param: Use file name (without .csv ending) as the instrument's name\n\t// Second param: Read all files in the current folder that end with \"-eod.csv\"\n\tbacktest.setDataSource(new BacktestCSVSource((name) => name.substr(0, -4), ['*-eod.csv']));\n\n\t// name, [from, to], steps; backtest will be run with 100 variations\n\tbacktest.addOptimization('slowSMA', [5, 20], 10);\n\tbacktest.addOptimization('fastSMA', [20, 100], 10);\n\n\tbacktest.setInstrumentConfiguration({\n\t\tAAPL: {\n\t\t\ttype: instrumentType.stock,\n\t\t\tmargin: 0.5\n\t\t}\n\t});\n\n\tbacktest.setConfiguration({\n\t\t// $1 per instrument traded\n\t\tcommission: (order) => order.size * 1,\n\t\tslippage: (order) => order.size * order.instrument.head()[0].open * 0.01,\n\t});\n\n\tbacktest.setStrategies((params) => {\n\t\treturn runThrough(\n\t\t\t// Use a simple SMA strategy; buy instruments for the same amount\n\t\t\trejectOnFalse(\n\t\t\t\tnew RunMonthly(),\n\t\t\t\t// Before buying new instruments, reduce the amount of the ones you're holding\n\t\t\t\tnew RebalancePositions(),\n\t\t\t\tnew EqualPositionSize(),\n\t\t\t),\n\t\t\t// Rebalance the open positions every month\n\t\t\trejectOnFalse(\n\t\t\t\tnew SMAAlgo('close', params('fastSMA'), params('slowSMA')),\n\t\t\t\tnew EqualPositionSize(),\n\t\t\t),\n\t\t);\n\t});\n\n\t// Reads from stream and runs one stream per optimization; accepts start and end date\n\tawait backtest.run(new Date(2010, 0, 1));\n\n\t// Writes JSON for all instruments (setStream) and result1/2 (setResults) to file system\n\t// True for zip/folder (?)\n\tawait backtest.save('./data', true);\n\n})();\n\n"],"file":"goal.js"}