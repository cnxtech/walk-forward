{"version":3,"sources":["../../../src/sources/csv/specToPath.mjs"],"names":["glob","logger","debug","getPathsFromSpecs","specs","Promise","all","map","spec","getPathsFromSpec","then","paths","reduce","prev","item","concat","resolve","reject","err","filePaths"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYD,MAAM,CAAC,wBAAD,CAAxB;AAGA;;;;;AAIA,eAAeE,iBAAf,CAAiCC,KAAjC,EAAwC;AACvCF,EAAAA,KAAK,CAAC,yBAAD,EAA4BE,KAA5B,CAAL;AACA,SAAOC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU;AACtC,WAAOC,gBAAgB,CAACD,IAAD,CAAvB;AACA,GAFkB,CAAZ,EAEHE,IAFG,CAEGC,KAAD,IAAW;AACnBT,IAAAA,KAAK,CAAC,cAAD,EAAiBS,KAAjB,CAAL,CADmB,CAEnB;;AACA,WAAOA,KAAK,CAACC,MAAN,CAAa,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,CAACE,MAAL,CAAYD,IAAZ,CAA7B,EAAgD,EAAhD,CAAP;AACA,GANM,CAAP;AAOA;AAGD;;;;;;AAIA,eAAeL,gBAAf,CAAgCD,IAAhC,EAAsC;AACrC,SAAO,IAAIH,OAAJ,CAAY,CAACW,OAAD,EAAUC,MAAV,KAAqB;AACvCjB,IAAAA,IAAI,CAACQ,IAAD,EAAO,CAACU,GAAD,EAAMC,SAAN,KAAoB;AAC9BjB,MAAAA,KAAK,CAAC,0BAAD,EAA6BM,IAA7B,EAAmCW,SAAnC,CAAL;AACA,UAAID,GAAJ,EAASD,MAAM,CAACC,GAAD,CAAN,CAAT,KACKF,OAAO,CAACG,SAAD,CAAP;AACL,KAJG,CAAJ;AAKA,GANM,CAAP;AAOA;;AAED,SAASV,gBAAT,EAA2BN,iBAA3B","sourcesContent":["import glob from 'glob';\nimport logger from '../../logger/logger';\nconst { debug } = logger('WalkForward:specToPath');\n\n\n/**\n* Gets all paths from pathSpecs\n* @param {array} specs\n*/\nasync function getPathsFromSpecs(specs) {\n\tdebug('Get paths from specs %o', specs);\n\treturn Promise.all(specs.map((spec) => {\n\t\treturn getPathsFromSpec(spec);\n\t})).then((paths) => {\n\t\tdebug('Got paths %o', paths);\n\t\t// paths is an array that consists of multiple arrays; flatten it\n\t\treturn paths.reduce((prev, item) => prev.concat(item), []);\n\t});\n}\n\n\n/**\n* Convert glob's callback into a Promise\n* @private\n*/\nasync function getPathsFromSpec(spec) {\n\treturn new Promise((resolve, reject) => {\n\t\tglob(spec, (err, filePaths) => {\n\t\t\tdebug('Paths for spec %o are %o', spec, filePaths);\n\t\t\tif (err) reject(err);\n\t\t\telse resolve(filePaths);\n\t\t});\n\t});\n}\n\nexport { getPathsFromSpec, getPathsFromSpecs };"],"file":"specToPath.mjs"}