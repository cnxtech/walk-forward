{"version":3,"sources":["../../src/instrument/Instrument.mjs"],"names":["ViewableDataSeries","Instrument","constructor","name","Error"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,uCAA/B;AAEA;;;;AAGA,eAAe,MAAMC,UAAN,SAAyBD,kBAAzB,CAA4C;AAEvD;;;;AAIA;;;;;AAIA;;;;;AAKA;;;;;;;;AAQA;;;AAGAE,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd;;AACA,QAAI,CAACA,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACnC,YAAM,IAAIC,KAAJ,CAAW,2EAA0ED,IAAK,GAA1F,CAAN;AACH;;AACD,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AAhCsD","sourcesContent":["import ViewableDataSeries from '../data-series/ViewableDataSeries.mjs';\n\n/**\n* Represents any tradable/backtestable instrument\n*/\nexport default class Instrument extends ViewableDataSeries {\n\n    /* ohlcChartConfig = {\n        type: 'ohlc',\n    } */\n\n    /**\n     * TODO: Check if all required fields (OHLC + date) are available â€“ if they're not we'll run\n     * into problems later\n     */\n    /* add(data) {\n        // Check object and Map\n        super.add(data);\n    } */\n\n    /* addColumns(data) {\n        super.addColumns(data);\n        for (const [columnName] of data) {\n            if (this.viewConfig.chart.has(columnName)) continue;\n            this.viewConfig.chart.set(columnName)\n        }\n    } */\n\n    /**\n    * @param {string} name\n    */\n    constructor(name) {\n        super();\n        if (!name || typeof name !== 'string') {\n            throw new Error(`Instrument: Pass the name (string) as first argument to constructor, is ${name}.`);\n        }\n        this.name = name;\n    }\n\n}\n"],"file":"Instrument.mjs"}