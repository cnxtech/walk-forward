{"version":3,"sources":["../../src/optimization/Optimization.mjs"],"names":["combineParameters","generateLogarithmicParameters","logger","debug","Optimization","Map","addParameter","name","bounds","steps","type","config","Error","Array","isArray","length","parameterConfigs","get","console","warn","set","generateParameterSets","valueMap","from","forEach","getValuesForParameter","result","parameterConfig","logBase"],"mappings":";;AAAA,OAAOA,iBAAP,MAA8B,yCAA9B;AACA,SAASC,6BAAT,QAA8C,2CAA9C;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYD,MAAM,CAAC,0BAAD,CAAxB;AAEA,eAAe,MAAME,YAAN,CAAmB;AAAA;AAAA,8CAKd,IAAIC,GAAJ,EALc;AAAA;;AAOjC;;;;;;;;;AASAC,EAAAA,YAAY,CAACC,IAAD,EAAOC,MAAP,EAAeC,KAAK,GAAG,EAAvB,EAA2BC,IAAI,GAAG,KAAlC,EAAyCC,MAAM,GAAG,EAAlD,EAAsD;AACjE,QAAI,CAACJ,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC,MAAM,IAAIK,KAAJ,CAAW;iCACxB,OAAOL,IAAM,GADA,CAAN;AAEvC,QAAI,CAACC,MAAD,IAAW,CAACK,KAAK,CAACC,OAAN,CAAcN,MAAd,CAAZ,IAAqCA,MAAM,CAACO,MAAP,KAAkB,CAAvD,IACH,OAAOP,MAAM,CAAC,CAAD,CAAb,KAAqB,QADlB,IAC8B,OAAOA,MAAM,CAAC,CAAD,CAAb,KAAqB,QADnD,IAEHA,MAAM,CAAC,CAAD,CAAN,IAAaA,MAAM,CAAC,CAAD,CAFpB,EAEyB,MAAM,IAAII,KAAJ,CAAW;+CAAX,CAAN;AAEzB,QAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B,MAAM,IAAIG,KAAJ,CAAW;4BAAX,CAAN;AAE/B,QAAI,EAAEF,IAAI,KAAK;AAAM;AAAjB,KAAJ,EAA6C,MAAM,IAAIE,KAAJ,CAAW;yBAAX,CAAN;AAE7C,QAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC,MAAM,IAAIC,KAAJ,CAAW;2BAAX,CAAN;AAGhC,QAAI,KAAKI,gBAAL,CAAsBC,GAAtB,CAA0BV,IAA1B,CAAJ,EAAqCW,OAAO,CAACC,IAAR,CAAc;wBAC5BZ,IAAM,GADQ;AAGrC,SAAKS,gBAAL,CAAsBI,GAAtB,CAA0Bb,IAA1B,EAAgC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiBC,MAAAA,IAAjB;AAAuBC,MAAAA;AAAvB,KAAhC;AACA;AAED;;;;;;AAIAU,EAAAA,qBAAqB,GAAG;AACvB;AACA,UAAMC,QAAQ,GAAG,IAAIjB,GAAJ,EAAjB;AACAQ,IAAAA,KAAK,CAACU,IAAN,CAAW,KAAKP,gBAAhB,EAAkCQ,OAAlC,CAA2Cb,MAAD,IAAY;AACrDW,MAAAA,QAAQ,CAACF,GAAT,CAAaT,MAAM,CAAC,CAAD,CAAnB,EAAwB,KAAKc,qBAAL,CAA2Bd,MAAM,CAAC,CAAD,CAAjC,CAAxB;AACA,KAFD;AAGA,UAAMe,MAAM,GAAG1B,iBAAiB,CAACsB,QAAD,CAAhC;AACAnB,IAAAA,KAAK,CAAC,8BAAD,EAAiCmB,QAAjC,EAA2CI,MAA3C,CAAL;AACA,WAAOA,MAAP;AACA;AAED;;;;;;;;AAMAD,EAAAA,qBAAqB,CAACE,eAAD,EAAkB;AACtC,QAAIA,eAAe,CAACjB,IAAhB,KAAyB,KAA7B,EAAoC,OAAOT,6BAA6B,CACvE0B,eAAe,CAACnB,MAAhB,CAAuB,CAAvB,CADuE,EAEvEmB,eAAe,CAACnB,MAAhB,CAAuB,CAAvB,CAFuE,EAGvEmB,eAAe,CAAClB,KAHuD,EAIvEkB,eAAe,CAAChB,MAAhB,CAAuBiB,OAJgD,CAApC;AAMpC;;AAhEgC","sourcesContent":["import combineParameters from '../combine-parameters/combineParameters';\nimport { generateLogarithmicParameters } from '../generate-parameters/generateParameters';\nimport logger from '../logger/logger';\nconst { debug } = logger('WalkForward:Optimization');\n\nexport default class Optimization {\n\n\t/**\n\t * Holds parameter config: key is the param's name, value its value\n\t */\n\tparameterConfigs = new Map();\n\n\t/**\n\t* Add a configuration for a parameter that should be optimized\n\t* @param {string} name\t\t\tName of the parameter\n\t* @param {number[]} bounds\t\tBoundaries (from/to) for parameters\n\t* @param {number} steps\t\t\tNumber of param values to generate\n\t* @param {string} type\t\t\t'log' or 'lin'\n\t* @param {object} config\t\tConfiguration for the parameter. For accepts 'logBase' if type \n\t*\t\t\t\t\t\t\t\tis 'log'\n\t*/\n\taddParameter(name, bounds, steps = 10, type = 'log', config = {}) {\n\t\tif (!name || typeof name !== 'string') throw new Error(`Optimization: First parameter (name) \n\t\t\tmust be a name (string), is ${ typeof name }.`);\n\t\tif (!bounds || !Array.isArray(bounds) || bounds.length !== 2 || \n\t\t\ttypeof bounds[0] !== 'number' || typeof bounds[1] !== 'number' || \n\t\t\tbounds[1] <= bounds[0]) throw new Error(`Optimization: Second parameter (boundaries) \n\t\t\tmust be an array consisting of two numbers.`);\n\t\tif (typeof steps !== 'number') throw new Error(`Optimization: Third parameter (number of \n\t\t\tsteps) must be a number.`);\n\t\tif (!(type === 'log' /*|| type === 'lin'*/)) throw new Error(`Optimization: Fourth parameter\n\t\t\t(type) must be 'log'.`);\n\t\tif (typeof config !== 'object') throw new Error(`Optimization: Fifth parameter must be\n\t\t\ta configuration object.`);\n\n\t\tif (this.parameterConfigs.get(name)) console.warn(`Optimization: You're overwriting an \n\t\t\texisting parameter ${ name }.`);\n\n\t\tthis.parameterConfigs.set(name, { bounds, steps, type, config });\n\t}\n\n\t/**\n\t* Generates all possible parameter combinations\n\t* @returns {Map[]}\t\tAll possible parameter sets\n\t*/\n\tgenerateParameterSets() {\n\t\t// Convert parameters into Maps with key: name, value: array of values\n\t\tconst valueMap = new Map();\n\t\tArray.from(this.parameterConfigs).forEach((config) => {\n\t\t\tvalueMap.set(config[0], this.getValuesForParameter(config[1]));\n\t\t});\n\t\tconst result = combineParameters(valueMap);\n\t\tdebug('Parameter sets for %o are %o', valueMap, result);\n\t\treturn result;\n\t}\n\n\t/**\n\t* Converts parameter configuration into parameters\n\t* @param {parameterConfig}\t\tValue of this.parameterConfig\n\t* @returns {array}\t\t\t\tParameter values for the given config\n\t* @private\n\t*/\n\tgetValuesForParameter(parameterConfig) {\n\t\tif (parameterConfig.type === 'log') return generateLogarithmicParameters(\n\t\t\tparameterConfig.bounds[0],\n\t\t\tparameterConfig.bounds[1],\n\t\t\tparameterConfig.steps,\n\t\t\tparameterConfig.config.logBase,\n\t\t);\n\t}\n\n}\n\n"],"file":"Optimization.mjs"}