{"version":3,"sources":["../../src/indicators/getChartConfig.mjs"],"names":["getChartConfig","identifier","configs","stoch","chart","name","height","series","type","color"],"mappings":"AAAA;;;;;;;;AAQA,eAAe,SAASA,cAAT,CAAwBC,UAAxB,EAAoC;AAE/C;AACA;AAEA,QAAMC,OAAO,GAAG;AACZ;AACAC,IAAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE,uBADH;AAEHC,QAAAA,MAAM,EAAE;AAFL,OADJ;AAKHC,MAAAA,MAAM,EAAE;AACJ,mBAAW;AACPC,UAAAA,IAAI,EAAE,MADC;AAEPC,UAAAA,KAAK,EAAE;AAFA,SADP;AAKJ,mBAAW;AACPD,UAAAA,IAAI,EAAE;AADC;AALP;AALL;AAFK,GAAhB;AAmBA,SAAON,OAAO,CAACD,UAAD,CAAd;AAEH","sourcesContent":["/**\n * Returns a chart config for a transformer that's identified by identifier. Use a function \n * (instead of an object) to make use of keys (key must be re-generated with every call; if\n * we export an object, it will only be instantiated once).\n * @param {String} identifier       Identifier for the transformer (name of tulip indicators) \n *                                  for which config shoud be added.\n * @return {object}                 configuration for transformer of type identifier\n */\nexport default function getChartConfig(identifier) {\n    \n    // Create a symbol that we can use to match \n    // const key = Symbol();\n\n    const configs = {\n        // Key is identifier of tulip indicator\n        stoch: {\n            chart: {\n                name: 'Stochastic Oscillator',\n                height: 0.2,\n            },\n            series: {\n                'stoch_k': {\n                    type: 'line',\n                    color: 'red',\n                },\n                'stoch_d': {\n                    type: 'line',\n                },\n            },\n        },\n    };\n\n    return configs[identifier];\n\n}\n\n"],"file":"getChartConfig.mjs"}