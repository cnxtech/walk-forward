{"version":3,"sources":["../../src/data-series-exporter/DataSeriesExporter.mjs"],"names":["exportToCsv","logger","colors","DataSeries","debug","DataSeriesExporter","export","dataSeries","path","Error","formattedData","reformatData","storeData","head","columns","result","key","value","headField","description","console","log","yellow","push","dataRow","data","resultRow","col","content","get","undefined","dataAsArray","length"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,8BAAxB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAYH,MAAM,CAAC,gCAAD,CAAxB;AAEA;;;;;AAIA,eAAe,MAAMI,kBAAN,CAAyB;AAGpC;;;;;;AAKA;;;;;;;AAQA;;;;;AAKA,QAAMC,MAAN,CAAaC,UAAb,EAAyBC,IAAzB,EAA+B;AAE3B,QAAI,CAACD,UAAD,IAAe,EAAEA,UAAU,YAAYJ,UAAxB,CAAnB,EAAwD;AACpD,YAAM,IAAIM,KAAJ,CAAW;4BAAX,CAAN;AAEH;;AAED,QAAI,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACnC,YAAM,IAAIC,KAAJ,CAAW,2DAAX,CAAN;AACH,KAT0B,CAW3B;;;AACA,UAAMC,aAAa,GAAG,KAAKC,YAAL,CAAkBJ,UAAlB,CAAtB;AACA,UAAM,KAAKK,SAAL,CAAeF,aAAf,EAA+B,GAAEF,IAAK,MAAtC,CAAN;AAEH;AAGD;;;;;AAIA;;;;;;;;;AAWA;;;;;;;;AAMAG,EAAAA,YAAY,CAACJ,UAAD,EAAa;AACrB,UAAMM,IAAI,GAAGN,UAAU,CAACO,OAAxB;AACA,UAAMC,MAAM,GAAG,CAAC,EAAD,CAAf,CAFqB,CAGrB;;AACA,SAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BJ,IAA3B,EAAiC;AAC7B,UAAIK,SAAS,GAAGD,KAAK,CAACE,WAAN,IAAqBH,GAArC,CAD6B,CAE7B;AACA;;AACA,UAAI,OAAOE,SAAP,KAAqB,QAAzB,EAAmC;AAC/BE,QAAAA,OAAO,CAACC,GAAR,CAAYnB,MAAM,CAACoB,MAAP,CAAe;;0CAAf,CAAZ,EAE6BJ,SAF7B;AAGAA,QAAAA,SAAS,GAAG,sBAAZ;AACH;;AACDH,MAAAA,MAAM,CAAC,CAAD,CAAN,CAAUQ,IAAV,CAAeL,SAAf;AACH,KAfoB,CAgBrB;;;AACA,SAAK,MAAMM,OAAX,IAAsBjB,UAAU,CAACkB,IAAjC,EAAuC;AACnC,YAAMC,SAAS,GAAG,EAAlB;;AACA,WAAK,MAAM,CAACC,GAAD,CAAX,IAAoBd,IAApB,EAA0B;AACtB,YAAIe,OAAO,GAAGJ,OAAO,CAACK,GAAR,CAAYF,GAAZ,CAAd,CADsB,CAEtB;;AACA,YAAIC,OAAO,KAAKE,SAAhB,EAA2BF,OAAO,GAAG,EAAV;AAC3BF,QAAAA,SAAS,CAACH,IAAV,CAAeK,OAAf;AACH;;AACDb,MAAAA,MAAM,CAACQ,IAAP,CAAYG,SAAZ;AACH;;AACD,WAAOX,MAAP;AACH;AAGD;;;;;;;;;AAOAH,EAAAA,SAAS,CAACmB,WAAD,EAAcvB,IAAd,EAAoB;AAEzBJ,IAAAA,KAAK,CAAC,wBAAD,EAA2B2B,WAAW,CAAC,CAAD,CAAX,CAAeC,MAA1C,EAAkDxB,IAAlD,CAAL;AACA,WAAOR,WAAW,CAACQ,IAAD,EAAOuB,WAAP,CAAlB;AAEH;;AAvGmC","sourcesContent":["import exportToCsv from '../export-to-csv/exportToCsv';\nimport logger from '../logger/logger';\nimport colors from 'colors';\nimport DataSeries from '../data-series/DataSeries';\n\nconst { debug } = logger('WalkForward:DataSeriesExporter');\n\n/**\n * Exports one or multiple DataSeries for a given configuration. Use a class in order to persist \n * the configuration and use it for multiple DataSeries.\n */\nexport default class DataSeriesExporter {\n    \n\n    /**\n     * Sets the fields to export and their order\n     * @param {array} orderedFields     An array of keys used in the Map that holds the DataSerie's\n     *                                  data.\n     */\n    /*setFields(orderedFields) {\n        if (!Array.isArray(orderedFields)) {\n            throw new Error(`DataSeriesExplorer: first argument for setFields must be an array`);\n        }\n        this.orderedFields = orderedFields;\n    }*/\n\n\n    /**\n     * Does the actual export.\n     * @param  {DataSeries} dataSeries      DataSeries to export.\n     * @param  {string} path                Path (including file name) to store the export under.\n     */\n    async export(dataSeries, path) {\n\n        if (!dataSeries || !(dataSeries instanceof DataSeries)) {\n            throw new Error(`DataSeriesExplorer: First argument for export must e a valid \n                DataSeries.`);\n        }\n\n        if (!path || typeof path !== 'string') {\n            throw new Error(`DataSeriesExplorer: Pass a valid path as second argument.`);\n        }\n\n        //this.checkCols(dataSeries);\n        const formattedData = this.reformatData(dataSeries);\n        await this.storeData(formattedData, `${path}.csv`);\n\n    }\n\n\n    /**\n     * Sees if all columns of this.orderedFields are available, prints a warning if not.\n     * @private\n     */\n    /*checkCols(dataSeries) {\n        this.orderedFields.forEach((col) => {\n            if (!dataSeries.columns.has(col)) {\n                console.log(colors.yellow(`WARNING: Column %o is part of orderedFields in \n                    DataSeriesExporter but not a valid column of DataSeries`), col);\n            }\n        });\n    }*/\n\n    \n\n    /**\n     * Reformats dataSeries to 2-dimensional array that's accepted by fastCsv\n     * @param  {DataSeries} dataSeries\n     * @return {array[]}                      e.g. [[col1, col2], [row1col1, row1col2]]\n     * @private\n     */\n    reformatData(dataSeries) {\n        const head = dataSeries.columns;\n        const result = [[]];\n        // Create head row\n        for (const [key, value] of head) {\n            let headField = value.description || key;\n            // We advise users to use Symbols as col keys; be sure to give a meaningful warning\n            // if they don't provide a description.\n            if (typeof headField === 'symbol') {\n                console.log(colors.yellow(`DataSeriesExporter: If you use a Symbol as a column key, \n                    also provide a description for the column that can be used for the CSV export.\n                    Column affected is %o`), headField);\n                headField = 'Unspecified Symbol()';\n            }\n            result[0].push(headField);\n        }\n        // Create content rows\n        for (const dataRow of dataSeries.data) {\n            const resultRow = [];\n            for (const [col] of head) {\n                let content = dataRow.get(col);\n                // Make sure we output 0 (but not undefined)\n                if (content === undefined) content = '';\n                resultRow.push(content);\n            }\n            result.push(resultRow);\n        }\n        return result;\n    }\n\n\n    /**\n     * Stores data in a CSV file\n     * @param  {Array[]} dataAsArray        Data to store in a two-dimensional array (one row\n     *                                      per array entry)\n     * @returns {Promise}\n     * @private\n     */\n    storeData(dataAsArray, path) {\n\n        debug('Write %d entries to %s', dataAsArray[0].length, path);\n        return exportToCsv(path, dataAsArray);\n\n    }\n\n}\n\n"],"file":"DataSeriesExporter.mjs"}