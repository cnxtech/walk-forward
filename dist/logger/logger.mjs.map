{"version":3,"sources":["../../src/logger/logger.mjs"],"names":["debug","getConfig","getDebugLevels","debugLevels","doLog","logLevel","logFunction","originalParams","logLevels","includes","namespace","logger","returnObject","Object","keys","forEach","params"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA;;;;;;;AAMA,SAASC,KAAT,CAAeC,QAAf,EAAyBC,WAAzB,EAAsC,GAAGC,cAAzC,EAAyD;AACrD;AACA,QAAMC,SAAS,GAAGN,cAAc,CAACD,SAAS,CAAC,cAAD,CAAV,CAAhC;AACA,MAAI,CAACO,SAAS,CAACC,QAAV,CAAmBJ,QAAnB,CAAL,EAAmC;AACnCC,EAAAA,WAAW,CAAC,GAAGC,cAAJ,CAAX;AACH;AAED;;;;;;;;;;;;;;;;AAcA,eAAe,UAASG,SAAT,EAAoB;AAC/B;AACA,QAAMC,MAAM,GAAGX,KAAK,CAACU,SAAD,CAApB;AACA,QAAME,YAAY,GAAG,EAArB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYX,WAAZ,EAAyBY,OAAzB,CAAkCV,QAAD,IAAc;AAC3CO,IAAAA,YAAY,CAACP,QAAD,CAAZ,GAAyB,CAAC,GAAGW,MAAJ,KAAeZ,KAAK,CAACC,QAAD,EAAWM,MAAX,EAAmB,GAAGK,MAAtB,CAA7C;AACH,GAFD;AAGA,SAAOJ,YAAP;AACH","sourcesContent":["import debug from 'debug';\nimport { getConfig } from './environment';\nimport getDebugLevels from './getDebugLevels';\nimport debugLevels from './debugLevels';\n\n/**\n * Does the acutal logging, is the function returned when calling debug(namespace).\n * @param  {String} logLevel Log level\n * @param  {function} logFunction\n * @param  {Array} originalParams\n */\nfunction doLog(logLevel, logFunction, ...originalParams) {\n    // Get current logLevels\n    const logLevels = getDebugLevels(getConfig('DEBUG_LEVELS'));\n    if (!logLevels.includes(logLevel)) return;\n    logFunction(...originalParams);\n}\n\n/**\n * Main export: Exports an object with different log levels as keys, each containing the\n * corresponding log function.\n *\n * Use as follows:\n *\n * import logger from 'logger';\n * const log = logger('MyNamespace');\n * log.info('Info log level message');\n *\n * @param {String}      namespace\n * @return {Object}     Object with levels as keys and corresponding log functions as values, e.g.\n *                      { info: () => doInfoLogFunction }\n */\nexport default function(namespace) {\n    // Create new debugger (from npm debug module)\n    const logger = debug(namespace);\n    const returnObject = {};\n    Object.keys(debugLevels).forEach((logLevel) => {\n        returnObject[logLevel] = (...params) => doLog(logLevel, logger, ...params);\n    });\n    return returnObject;\n}\n"],"file":"logger.mjs"}