{"version":3,"sources":["../../src/backtest-instance/executeOrders.mjs"],"names":["colors","logger","executeOrder","debug","info","getNetCost","newPosition","oldPosition","value","executeOrders","positions","orders","prices","cash","cashAfterOrderExecution","ordersAsArray","instrument","order","push","positionsForLog","position","name","size","ordersForLog","map","pricesForLog","price","join","newPositions","Map","filter","has","get","sort","a","b","aPrice","bPrice","forEach","netCost","console","warn","yellow","set"],"mappings":"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","sourcesContent":["import colors from 'colors';\nimport logger from '../logger/logger';\nimport executeOrder from './executeOrder';\n\nconst { debug, info } = logger('WalkForward:executeOrders');\n\n/**\n * Helper function that returns the effective net price of an order; if order reduces the position\n * size, it will free money, price will be negative; else positive. We want to start with these\n * orders to free money before we spend it.\n */\nfunction getNetCost(newPosition, oldPosition) {\n    return newPosition.value - ((oldPosition && oldPosition.value) || 0);\n}\n\n\n/**\n * Executes orders: basically takes positions and returns new positions.\n * @param {Map} positions           Current positions. Key is instrument, value is an object with\n *                                  size, value, positions, closedPositions\n * @param {Map} orders              Orders to execute. Key is instrument, value an object with\n *                                  a size property\n * @param {Map} prices              Current prices; key is instrument, value current price\n * @param {number} cash             Current cash\n * @return {Map}                    Key: instrument, value an object with size, value, positions\n *                                  and closedPositions (see executeOrder)\n */\nexport default function executeOrders(positions, orders, prices, cash) {\n\n    // Create a new variable to not change cash which is an argument\n    let cashAfterOrderExecution = cash;\n\n    // Convert orders to array because\n    // 1) it used to be an array before the refactor\n    // 2) we can easily call methods on it\n    const ordersAsArray = [];\n    for (const [instrument, order] of orders) {\n        // Every order has a field size (which is passed in order) and instrument\n        ordersAsArray.push({ ...order, instrument });\n    }\n\n\n    // Create beautiful logs\n    const positionsForLog = [];\n    for (const [instrument, position] of positions) {\n        positionsForLog.push(`${instrument.name}:${position.size}`);\n    }\n    const ordersForLog = ordersAsArray.map(order => `${order.instrument.name}:${order.size}`);\n    const pricesForLog = [];\n    for (const [instrument, price] of prices) {\n        pricesForLog.push(`${instrument.name}:${price}`);\n    }\n    debug(\n        'Execute orders, positions are %o, orders %o, prices %o, cash %d',\n        positionsForLog.join(', '),\n        ordersForLog.join(', '),\n        pricesForLog.join(', '),\n        cashAfterOrderExecution,\n    );\n\n\n    // Start by cloning the old positions\n    const newPositions = new Map(positions);\n\n    ordersAsArray\n        // Don't order if there's no price for this bar\n        .filter((order) => {\n            if (!prices.has(order.instrument)) {\n                info(\n                    'Cannot take position for %s, no prices available',\n                    order.instrument.name,\n                );\n                return false;\n            }\n            return true;\n        })\n\n        // Get new position that would result if we were to execute the order\n        .map((order) => {\n            const position = executeOrder(\n                order.size,\n                positions.get(order.instrument),\n                prices.get(order.instrument),\n            );\n            return { instrument: order.instrument, position };\n        })\n\n        // Sort orders by price; buy the ones freeing money first\n        .sort((a, b) => {\n            const aPrice = getNetCost(a.position, positions.get(a.instrument));\n            const bPrice = getNetCost(b.position, positions.get(b.instrument));\n            return aPrice > bPrice ? 1 : -1;\n        })\n\n        // Execute orders if there's enough cash\n        .forEach((order) => {\n\n            const netCost = getNetCost(order.position, positions.get(order.instrument));\n\n            info(\n                'Try to execute order for %s, net cost is %d, cash is %d',\n                order.instrument.name,\n                netCost,\n                cashAfterOrderExecution,\n            );\n\n            // Not enough money\n            if (netCost > cashAfterOrderExecution) {\n                console.warn(\n                    colors.yellow('WARNING: Cannot execute order for %s, value is %d, cash available %d'),\n                    order.instrument.name,\n                    order.position.value,\n                    cashAfterOrderExecution,\n                );\n                return;\n            }\n\n            cashAfterOrderExecution -= netCost;\n\n            // All fine\n            info(\n                'Executed order for %s, new size is %d, net cost was %d, cash is %d',\n                order.instrument.name,\n                order.position.size,\n                netCost,\n                cashAfterOrderExecution,\n            );\n            newPositions.set(order.instrument, order.position);\n\n        });\n\n    return newPositions;\n\n}\n"],"file":"executeOrders.mjs"}