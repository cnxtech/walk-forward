{"version":3,"sources":["../../src/generate-parameters/generateParameters.mjs"],"names":["goldenRatio","Math","sqrt","generateLogarithmicParameters","from","to","steps","logBase","originalNumbers","Array","map","item","index","reductionRatio","length","result"],"mappings":"AAAA;AACA;AAEA;AACA,MAAMA,WAAW,GAAG,CAAC,IAAIC,IAAI,CAACC,IAAL,CAAU,CAAV,CAAL,IAAqB,CAAzC;AAEA;;;;;;;;;;;AAUA,SAASC,6BAAT,CAAuCC,IAAvC,EAA6CC,EAA7C,EAAiDC,KAAjD,EAAwDC,OAAO,GAAGP,WAAlE,EAA+E;AAC3E;AACA,QAAMQ,eAAe,GAAGC,KAAK,CACxBL,IADmB,CACd,IAAIK,KAAJ,CAAUH,KAAV,CADc,EAEnBI,GAFmB,CAEf,CAACC,IAAD,EAAOC,KAAP,KAAiBL,OAAO,IAAIK,KAFb,CAAxB,CAF2E,CAK3E;;AACA,QAAMC,cAAc,GAAG,CAACR,EAAE,GAAGD,IAAN,KAClBI,eAAe,CAACA,eAAe,CAACM,MAAhB,GAAyB,CAA1B,CAAf,GAA8CN,eAAe,CAAC,CAAD,CAD3C,CAAvB;AAEA,QAAMO,MAAM,GAAGP,eAAe,CAACE,GAAhB,CAAoBC,IAAI,IACnC;AACCP,EAAAA,IAAI,GAAIS,cAAc,GAAGF,IAA1B,GAAmCE,cAFxB,CAAf;AAIA,SAAOE,MAAP;AACH;;AAED,SAASZ,6BAAT","sourcesContent":["// import logger from '../logger/logger';\n// const { debug } = logger('WalkForward:genereateParameters');\n\n// Use golden ratio (1.618) as default – Math.E is too large\nconst goldenRatio = (1 + Math.sqrt(5)) / 2;\n\n/**\n* Returns an array with {steps} values ranging from {from} to {to} where the distance between every\n* step is logarithmic with base {logBase}.\n* @param {number} from              Lowest value\n* @param {number} to                Highest value\n* @param {number} steps             Number of steps to return from from to to, also the number of\n*                                   items in the array that will be returned.\n* @param {number} logBase           Logarithmic base for steps\n* @returns {array}\n*/\nfunction generateLogarithmicParameters(from, to, steps, logBase = goldenRatio) {\n    // Generate steps - 1 numbers with logBase «logBase» for power 1 to (steps + 1)\n    const originalNumbers = Array\n        .from(new Array(steps))\n        .map((item, index) => logBase ** index);\n    // Reduce (or expand) all steps by a ratio\n    const reductionRatio = (to - from) /\n        (originalNumbers[originalNumbers.length - 1] - originalNumbers[0]);\n    const result = originalNumbers.map(item => (\n        // Deduct reduction ratio because the first orignalNumber is 1, not 0\n        (from + (reductionRatio * item)) - reductionRatio\n    ));\n    return result;\n}\n\nexport { generateLogarithmicParameters };\n"],"file":"generateParameters.mjs"}