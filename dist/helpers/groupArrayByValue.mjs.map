{"version":3,"sources":["../../src/helpers/groupArrayByValue.mjs"],"names":["groupArrayByValue","data","groupValueFunction","Array","isArray","Error","groupedData","Map","entry","value","has","get","push","set"],"mappings":"AACA;;;;;;;;AAQA,eAAe,SAASA,iBAAT,CAA2BC,IAA3B,EAAiCC,kBAAjC,EAAqD;AAEhE,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAL,EAA0B;AACtB,UAAM,IAAII,KAAJ,CAAW,oDAAX,CAAN;AACH;;AACD,MAAI,OAAOH,kBAAP,KAA8B,UAAlC,EAA8C;AAC1C,UAAM,IAAIG,KAAJ,CAAW,oEAAX,CAAN;AACH;;AAED,QAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;;AAEA,OAAK,MAAMC,KAAX,IAAoBP,IAApB,EAA0B;AACtB,UAAMQ,KAAK,GAAGP,kBAAkB,CAACM,KAAD,CAAhC;AACA,QAAIF,WAAW,CAACI,GAAZ,CAAgBD,KAAhB,CAAJ,EAA4BH,WAAW,CAACK,GAAZ,CAAgBF,KAAhB,EAAuBG,IAAvB,CAA4BJ,KAA5B,EAA5B,KACKF,WAAW,CAACO,GAAZ,CAAgBJ,KAAhB,EAAuB,CAACD,KAAD,CAAvB;AACR;;AAED,SAAOF,WAAP;AAEH","sourcesContent":["\n/**\n * Takes an array, groups it by a certain value of its items and returns the grouped Map\n * @param  {array} data                 Data to group\n * @param  {[type]} groupValueFunction  Function that takes an item of data as an argument and\n *                                      returns the key to group by, e.g. (item) => item.key\n * @return {Map}                        Map with grouping value as a key and an array of the\n *                                      values for that key as an array\n */\nexport default function groupArrayByValue(data, groupValueFunction) {\n    \n    if (!Array.isArray(data)) {\n        throw new Error(`groupArrayByValue: data passed in is not an array.`);\n    }\n    if (typeof groupValueFunction !== 'function') {\n        throw new Error(`groupArrayByValue: groupValueFunction passed in is not a function.`);\n    }\n\n    const groupedData = new Map();\n\n    for (const entry of data) {\n        const value = groupValueFunction(entry);\n        if (groupedData.has(value)) groupedData.get(value).push(entry);\n        else groupedData.set(value, [entry]);\n    }\n\n    return groupedData;\n\n}"],"file":"groupArrayByValue.mjs"}