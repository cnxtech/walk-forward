{"version":3,"sources":["../../src/helpers/checkInstrumentData.mjs"],"names":["checkInstrumentData","data","Map","Error","has","get","Date"],"mappings":"AAAA;;;;;AAKA,eAAe,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AAC9C,MAAI,EAAEA,IAAI,YAAYC,GAAlB,CAAJ,EAA4B;AACxB,UAAM,IAAIC,KAAJ,CAAW,wFAAuFF,IAAK,GAAvG,CAAN;AACH,GAFD,MAGK,IAAI,CAACA,IAAI,CAACG,GAAL,CAAS,MAAT,CAAD,IAAqB,EAAEH,IAAI,CAACI,GAAL,CAAS,MAAT,aAA4BC,IAA9B,CAAzB,EAA8D;AAC/D,UAAM,IAAIH,KAAJ,CAAW,yHAAwHF,IAAI,CAACI,GAAL,CAAS,MAAT,CAAiB,GAApJ,CAAN;AACH,GAFI,MAGA,IAAI,CAACJ,IAAI,CAACG,GAAL,CAAS,OAAT,CAAD,IAAsB,OAAOH,IAAI,CAACI,GAAL,CAAS,OAAT,CAAP,KAA6B,QAAvD,EAAiE;AAClE,UAAM,IAAIF,KAAJ,CAAW,4HAA2HF,IAAI,CAACI,GAAL,CAAS,OAAT,CAAkB,EAAxJ,CAAN;AACH,GAFI,CAGL;AACA;AAJK,OAKA,IAAI,CAACJ,IAAI,CAACG,GAAL,CAAS,MAAT,CAAD,IAAqB,OAAOH,IAAI,CAACI,GAAL,CAAS,MAAT,CAAP,KAA4B,QAArD,EAA+D;AAChE,YAAM,IAAIF,KAAJ,CAAW,2HAA0HF,IAAI,CAACI,GAAL,CAAS,MAAT,CAAiB,EAAtJ,CAAN;AACH,KAFI,MAGA,IAAI,CAACJ,IAAI,CAACG,GAAL,CAAS,YAAT,CAAD,IAA2B,OAAOH,IAAI,CAACI,GAAL,CAAS,YAAT,CAAP,KAAkC,QAAjE,EAA2E;AAC5E,YAAM,IAAIF,KAAJ,CAAW,iIAAgIF,IAAI,CAACI,GAAL,CAAS,YAAT,CAAuB,EAAlK,CAAN;AACH;AACJ","sourcesContent":["/**\n * Checks if all required fields are available on the interval data for an instrument\n * @param {Map[]} data    Data to check, is an array of Maps with open, close, date, instrument â€¦\n * @throws\n */\nexport default function checkInstrumentData(data) {\n    if (!(data instanceof Map)) {\n        throw new Error(`checkInstrumentData: Every data set returned by generator function must be a Map, is ${data}.`);\n    }\n    else if (!data.has('date') || !(data.get('date') instanceof Date)) {\n        throw new Error(`checkInstrumentData: Every data set returned by generator function must contain a valid date field that is a Date, is ${data.get('date')}.`);\n    }\n    else if (!data.has('close') || typeof data.get('close') !== 'number') {\n        throw new Error(`checkInstrumentData: Every data set returned by generator function must contain a valid close field that is a number, is ${data.get('close')}`);\n    }\n    // Open field is needed to execute orders on the beginning of the the next interval with the\n    // actual open price\n    else if (!data.has('open') || typeof data.get('open') !== 'number') {\n        throw new Error(`checkInstrumentData: Every data set returned by generator function must contain a valid open field that is a number, is ${data.get('open')}`);\n    }\n    else if (!data.has('instrument') || typeof data.get('instrument') !== 'string') {\n        throw new Error(`checkInstrumentData: Every data set returned by generator function must contain a valid instrument field that is a string, is ${data.get('instrument')}`);\n    }\n}\n"],"file":"checkInstrumentData.mjs"}