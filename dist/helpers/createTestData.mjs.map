{"version":3,"sources":["../../src/helpers/createTestData.mjs"],"names":["convertToBar","input","Map","Date","createTestData","rawDataSets","bars","map","sorted","slice","sort","a","b","get","getTime","grouped","reduce","prev","bar","time","has","push","set","returnValue","Array","from","values"],"mappings":"AAAA;;;AAGA,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,SAAO,IAAIC,GAAJ,CAAQ,CACX,CAAC,YAAD,EAAeD,KAAK,CAAC,CAAD,CAApB,CADW,EAEX,CAAC,MAAD,EAAS,IAAIE,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkBF,KAAK,CAAC,CAAD,CAAvB,CAAT,CAFW,EAGX,CAAC,MAAD,EAASA,KAAK,CAAC,CAAD,CAAd,CAHW,EAIX,CAAC,OAAD,EAAUA,KAAK,CAAC,CAAD,CAAf,CAJW,CAAR,CAAP;AAMH;AAED;;;;;;;;;;AAQA,eAAe,SAASG,cAAT,CAAwBC,WAAxB,EAAqC;AAChD;AACA,QAAMC,IAAI,GAAGD,WAAW,CAACE,GAAZ,CAAgBP,YAAhB,CAAb;AACA,QAAMQ,MAAM,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcC,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACxC;AACA,QAAID,CAAC,CAACE,GAAF,CAAM,MAAN,EAAcC,OAAd,OAA4BF,CAAC,CAACC,GAAF,CAAM,MAAN,EAAcC,OAAd,EAAhC,EAAyD;AACrD,aAAOH,CAAC,CAACE,GAAF,CAAM,YAAN,IAAsBD,CAAC,CAACC,GAAF,CAAM,YAAN,CAAtB,GAA4C,CAAC,CAA7C,GAAiD,CAAxD;AACH;;AACD,WAAOF,CAAC,CAACE,GAAF,CAAM,MAAN,EAAcC,OAAd,KAA0BF,CAAC,CAACC,GAAF,CAAM,MAAN,EAAcC,OAAd,EAAjC;AACH,GANc,CAAf,CAHgD,CAUhD;;AACA,QAAMC,OAAO,GAAGP,MAAM,CAACQ,MAAP,CAAc,CAACC,IAAD,EAAOC,GAAP,KAAe;AACzC,UAAMC,IAAI,GAAGD,GAAG,CAACL,GAAJ,CAAQ,MAAR,EAAgBC,OAAhB,EAAb;AACA,QAAIG,IAAI,CAACG,GAAL,CAASD,IAAT,CAAJ,EAAoBF,IAAI,CAACJ,GAAL,CAASM,IAAT,EAAeE,IAAf,CAAoBH,GAApB,EAApB,KACKD,IAAI,CAACK,GAAL,CAASH,IAAT,EAAe,CAACD,GAAD,CAAf;AACL,WAAOD,IAAP;AACH,GALe,EAKb,IAAIf,GAAJ,EALa,CAAhB;AAMA,QAAMqB,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWV,OAAO,CAACW,MAAR,EAAX,CAApB;AACA,SAAOH,WAAP;AACH","sourcesContent":["/**\n * Converts array input to a map\n */\nfunction convertToBar(input) {\n    return new Map([\n        ['instrument', input[0]],\n        ['date', new Date(2018, 0, input[1])],\n        ['open', input[2]],\n        ['close', input[3]],\n    ]);\n}\n\n/**\n* Creates a data set from shortened data\n* @param {object[]} dataSet             Array of objects to create dataSet from:\n*                                       - name\n*                                       - date (day)\n*                                       - open\n*                                       - close\n*/\nexport default function createTestData(rawDataSets) {\n    // Create Map with date, open, close and instrument\n    const bars = rawDataSets.map(convertToBar);\n    const sorted = bars.slice(0).sort((a, b) => {\n        // 1st order: date, 2nd order: name\n        if (a.get('date').getTime() === b.get('date').getTime()) {\n            return a.get('instrument') < b.get('instrument') ? -1 : 1;\n        }\n        return a.get('date').getTime() - b.get('date').getTime();\n    });\n    // Group by date\n    const grouped = sorted.reduce((prev, bar) => {\n        const time = bar.get('date').getTime();\n        if (prev.has(time)) prev.get(time).push(bar);\n        else prev.set(time, [bar]);\n        return prev;\n    }, new Map());\n    const returnValue = Array.from(grouped.values());\n    return returnValue;\n}\n"],"file":"createTestData.mjs"}