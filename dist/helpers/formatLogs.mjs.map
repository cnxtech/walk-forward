{"version":3,"sources":["../../src/helpers/formatLogs.mjs"],"names":["pad","nr","formatDate","date","dateString","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","formatInstruments","instruments","map","instrument","name","join","formatOrders","orders","Array","from","entries","order","size","formatPositions","positionEntry","filter","key","position","value"],"mappings":"AAAA,SAASA,GAAT,CAAaC,EAAb,EAAiB;AACb,SAAOA,EAAE,GAAG,EAAL,GAAW,IAAGA,EAAG,EAAjB,GAAqBA,EAA5B;AACH;AAGD;;;;;;;AAKA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,MAAIC,UAAU,GAAI,GAAED,IAAI,CAACE,WAAL,EAAmB,IAAGL,GAAG,CAACG,IAAI,CAACG,QAAL,KAAkB,CAAnB,CAAsB,IAAGN,GAAG,CAACG,IAAI,CAACI,OAAL,EAAD,CAAiB,EAA1F;;AACA,MAAIJ,IAAI,CAACK,QAAL,OAAoB,CAApB,IAAyBL,IAAI,CAACM,UAAL,OAAsB,CAA/C,IAAoDN,IAAI,CAACO,UAAL,OAAsB,CAA9E,EAAiF;AAC7EN,IAAAA,UAAU,IAAK,IAAGJ,GAAG,CAACG,IAAI,CAACK,QAAL,EAAD,CAAkB,IAAGR,GAAG,CAACG,IAAI,CAACM,UAAL,EAAD,CAAoB,IAAGT,GAAG,CAACG,IAAI,CAACO,UAAL,EAAD,CAAoB,EAA3F;AACH;;AACD,SAAON,UAAP;AACH;AAED;;;;;;;AAKA,SAASO,iBAAT,CAA2BC,WAA3B,EAAwC;AACpC,SAAOA,WAAW,CAACC,GAAZ,CAAgBC,UAAU,IAAIA,UAAU,CAACC,IAAzC,EAA+CC,IAA/C,CAAoD,IAApD,CAAP;AACH;AAED;;;;;;;AAKA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,SAAOC,KAAK,CAACC,IAAN,CAAWF,MAAM,CAACG,OAAP,EAAX,EACFR,GADE,CACE,CAAC,CAACC,UAAD,EAAaQ,KAAb,CAAD,KAA0B,GAAER,UAAU,CAACC,IAAK,IAAGO,KAAK,CAACC,IAAK,EAD5D,EAEFP,IAFE,CAEG,IAFH,KAEY,GAFnB;AAGH;AAED;;;;;;;;AAMA,SAASQ,eAAT,CAAyBC,aAAzB,EAAwC;AACpC,SAAON,KAAK,CAACC,IAAN,CAAWK,aAAa,CAACJ,OAAd,EAAX,EACFK,MADE,CACK,CAAC,CAACC,GAAD,CAAD,KAAWA,GAAG,KAAK,MAAR,IAAkBA,GAAG,KAAK,MAD1C,EAEH;AAFG,GAGFd,GAHE,CAGE,CAAC,CAACC,UAAD,EAAac,QAAb,CAAD,KAA6B,GAAEd,UAAU,CAACC,IAAK,IAAGa,QAAQ,CAACL,IAAK,IAAGK,QAAQ,CAACC,KAAM,GAHpF,EAIFb,IAJE,CAIG,IAJH,KAIY,GAJnB;AAKH;;AAGD,SAASQ,eAAT,EAA0BtB,UAA1B,EAAsCS,iBAAtC,EAAyDM,YAAzD","sourcesContent":["function pad(nr) {\n    return nr < 10 ? `0${nr}` : nr;\n}\n\n\n/**\n * Formats a date\n * @param  {Date} date  Date to format\n * @return {String}\n */\nfunction formatDate(date) {\n    let dateString = `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;\n    if (date.getHours() !== 0 || date.getMinutes() !== 0 || date.getSeconds() !== 0) {\n        dateString += ` ${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;\n    }\n    return dateString;\n}\n\n/**\n * Returns instruments as name1, name2 …\n * @param  {[type]} instruments [description]\n * @return {[type]}             [description]\n */\nfunction formatInstruments(instruments) {\n    return instruments.map(instrument => instrument.name).join(', ');\n}\n\n/**\n * Returns orders as name1:size1, name2:size2\n * @param  {Map} orders\n * @return {String}\n */\nfunction formatOrders(orders) {\n    return Array.from(orders.entries())\n        .map(([instrument, order]) => `${instrument.name}:${order.size}`)\n        .join(', ') || '—';\n}\n\n/**\n * Formats positions for string output.\n * @param  {Map} positionEntry One entry of positions (see BacktestInstance), e.g. gotten through\n * head()\n * @return {String}\n */\nfunction formatPositions(positionEntry) {\n    return Array.from(positionEntry.entries())\n        .filter(([key]) => key !== 'date' && key !== 'type')\n        // t stands for total\n        .map(([instrument, position]) => `${instrument.name}:${position.size}@${position.value}t`)\n        .join(', ') || '—';\n}\n\n\nexport { formatPositions, formatDate, formatInstruments, formatOrders };\n"],"file":"formatLogs.mjs"}