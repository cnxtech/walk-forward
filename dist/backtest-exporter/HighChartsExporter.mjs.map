{"version":3,"sources":["../../src/backtest-exporter/HighChartsExporter.mjs"],"names":["fs","path","util","logger","debug","HighChartsExporter","Map","getTotalChartHeight","height","charts","reduce","prev","chart","export","dataSeries","basePath","name","createMainChart","exportOHLC","createDataForAllColumns","updateHeights","writeData","ohlcDataArray","data","map","row","get","getTime","series","push","type","yAxis","mainChartIdentifier","mainConfig","id","title","text","createDefaultChartConfig","chartName","colsToIgnore","key","columns","includes","createDataForColumn","columnKey","chartViewConfig","viewConfig","seriesConfig","chartConfig","mappedCharts","has","spreadableChartConfig","chartIdCounter","undefined","set","highchartsSeries","createSeriesArrayFromColumn","filter","relativeSpace","totalHeight","length","percentageBasedSpace","topPosition","Math","floor","top","highstockData","filePath","join","fileContent","JSON","stringify","writeFile","promisify"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport util from 'util';\nimport logger from '../logger/logger.mjs';\n\nconst { debug } = logger('HighChartsExporter');\n\n/**\n * Quick win: Just export a data structure that highcharts will understand to simplify things.\n * Code's not very nice, tested only through main test.\n *\n * A word about configs: A ViewableDataSeries contains a viewConfig that may contain view\n * information for charts. The following config may be used for charts (also see\n * getChartConfig.mjs):\n * {\n *     // Config for the chart (i.e. a *row* in the whole chart)\n *     chart: {\n *         // Use an identifier to share a row across different indicators. Identifier of OHLC\n *         // is 'main'\n *         identifier: 'identifierToShareChartsAcrossDifferentIndicators',\n *         // Use config from HighStock's chart here: https://api.highcharts.com/highstock/chart\n *         name: 'name'\n *     }\n *     series: {\n *         columnName: {\n *             // Use series object of HighStock here, see\n *             // https://api.highcharts.com/highstock/series\n *             type: 'line'\n *         }\n *     }\n * }\n */\nexport default class HighChartsExporter {\n\n    /**\n     * Identifies the main chart; cannot use symbol (won't export correctly, won't work with\n     * HighCharts: https://api.highcharts.com/highcharts/series.line.yAxis\n     */\n    mainChartIdentifier = 'main-chart';\n\n    /**\n     * Contains one entry for every single data series (o, h, l, c, sma, other transformers â€¦)\n     */\n    series = [];\n\n    /**\n     * Contains one entry per chart; one chart may contain multiple data series (e.g. main contains\n     * o, h, l, c).\n     */\n    charts = new Map();\n\n    /**\n     * Every chart needs an id; count them up\n     */\n    chartIdCounter = 0;\n\n    /**\n     * Charts are modified before they are added to this.charts; one chart may appear in multiple\n     * series configs. Map original chart (from series config) to new map (from this.charts)\n     * Key is original, value is new chart. If new chart exists, chart is not added to this.charts.\n     */\n    // mappedCharts = new Map();\n\n\n    /**\n     * Returns sum of all heights of all charts. Is needed to calculate percent based height\n     * from relations.\n     * @returns {Number}\n     */\n    getTotalChartHeight() {\n        const height = this.charts.reduce((prev, chart) => prev + chart.height, 0);\n        debug('Total chart height is %o from %o', height, this.charts);\n        return height;\n    }\n\n\n    /**\n     * Exports a single instrument/data series to a json file\n     * @param  {[type]} instrument [description]\n     * @return {[type]}            [description]\n     */\n    async export(dataSeries, basePath, name) {\n\n        this.dataSeries = dataSeries;\n        this.basePath = basePath;\n        // dataSeries does not contain a name, but e.g. instrument (extended class) does\n        this.name = name || dataSeries.name;\n\n        debug('Export %s to %s', this.name, basePath);\n\n        this.createMainChart();\n        this.exportOHLC();\n\n        this.createDataForAllColumns();\n\n        this.updateHeights();\n        await this.writeData();\n        debug('Charts are %o', this.charts);\n\n    }\n\n\n\n    /**\n     * Does an export for OHLC, re-formats data, sets chart to 'main'\n     * @private\n     */\n    exportOHLC() {\n\n        const ohlcDataArray = this.dataSeries.data.map(row => (\n            // Use array (as object doesn't work for > 1000 rows, see\n            // https://api.highcharts.com/highstock/series.ohlc.data)\n            [\n                row.get('date').getTime(),\n                row.get('open'),\n                row.get('high'),\n                row.get('low'),\n                row.get('close'),\n            ]\n        ));\n\n        this.series.push({\n            type: 'ohlc',\n            name: this.name,\n            data: ohlcDataArray,\n            yAxis: this.mainChartIdentifier,\n        });\n\n    }\n\n\n    /**\n     * Just sets up the main chart, adds it to this.charts\n     * @private\n     */\n    createMainChart() {\n        const mainConfig = {\n            id: this.mainChartIdentifier,\n            height: 1,\n            title: {\n                text: 'OHLC',\n            },\n        };\n        this.charts.push(mainConfig);\n        // Smart: If we look up a chart with a missing config (=undefined) later, mainChart will\n        // be used.\n        // Update: Don't do this: Non-configured data should get its own chart, may be much too\n        // large/small for OHLC and will mess up data\n        // this.mappedCharts.set(undefined, mainConfig);\n    }\n\n\n    /**\n     * Creates a config for a chart when no config is given on column\n     * @param  {String} chartName   Name of the chart; usually the name of the DataSeries' column\n     * @return {Object}             Default chart config\n     * @private\n     */\n    createDefaultChartConfig(chartName = 'unknown') {\n        return {\n            height: 0.25,\n            // Make sure name is a string\n            name: `${chartName}`,\n        };\n    }\n\n\n    /**\n     * Go through all columns (and not the viewConfigs as we might miss some columns that\n     * were added *without* a config)\n     * @private\n     */\n    createDataForAllColumns() {\n\n        // Those columns were already added to the main chart â€“ ignore them from now on\n        const colsToIgnore = ['open', 'high', 'low', 'close', 'date'];\n\n        for (const [key] of this.dataSeries.columns) {\n            if (colsToIgnore.includes(key)) continue;\n            this.createDataForColumn(key);\n        }\n\n    }\n\n\n    /**\n     * Creates data (this.chart, this.series) for a given column\n     * @param {*} columnKey     Key that was used for the column; usually is a string or Symbol,\n     *                          but may be anything a Map accepts as a key.\n     * @private\n     */\n    createDataForColumn(columnKey) {\n\n        // Get chart config from dataSerie's viewConfig\n        const chartViewConfig = this.dataSeries.viewConfig &&\n            this.dataSeries.viewConfig.chart &&\n            this.dataSeries.viewConfig.chart.get(columnKey);\n\n        let seriesConfig;\n        let chartConfig;\n\n        // There's a chart config for this column\n        if (chartViewConfig) {\n            seriesConfig = chartViewConfig.series;\n            chartConfig = chartViewConfig.chart;\n        }\n\n        // Make sure seriesConfig is spreadable\n        seriesConfig = seriesConfig || {};\n\n        // Handle charts first: We need its ID to reference it by series\n        // Chart may appear in multiple series configs. Only add it to this.charts once.\n        let chart;\n        // console.debug('chartConfig is %o', chartConfig);\n\n        if (this.mappedCharts.has(chartConfig)) {\n            chart = this.mappedCharts.get(chartConfig);\n        }\n\n        else {\n            // Make sure chartConfig can be spread\n            const spreadableChartConfig = chartConfig || {};\n\n            chart = {\n                ...this.createDefaultChartConfig(columnKey),\n                ...spreadableChartConfig,\n                ...{\n                    // Id must be a string; if it's a number, it will be used as an index of the\n                    // charts array! Always overwrite id, use our internal one to prevent clashes.\n                    id: `${this.chartIdCounter += 1}`,\n                },\n            };\n\n            this.charts.push(chart);\n            // Never add undefined to mappedCharts as we want an own chart for all series that do\n            // not have a chartConfig. Adding undefined will use this chartConfig for all charts\n            // without a chartConfig.\n            if (chartConfig !== undefined) {\n                this.mappedCharts.set(chartConfig, chart);\n            }\n\n        }\n\n        // console.debug('chart is %o', chart);\n\n        const highchartsSeries = {\n            ...seriesConfig,\n            // If no chartIdentifier is provided, we explicitly want to add that series to the\n            // main chart.\n            yAxis: chart.id || this.mainChartIdentifier,\n            data: this.createSeriesArrayFromColumn(columnKey),\n            name: columnKey,\n        };\n\n        // console.debug('push highcharts series %o', highchartsSeries);\n        this.series.push(highchartsSeries);\n\n\n    }\n\n\n    /**\n     * Creates an array that can be used as data source for HighStock from c urrent dataSeries\n     * @param  {*} columnKey\n     * @return {Array}           Array with rows; every row has 2 entries (data, value)\n     */\n    createSeriesArrayFromColumn(columnKey) {\n        return this.dataSeries.data\n            // Remove all empty rows\n            .filter(row => row.get(columnKey) !== undefined)\n            // Object -> Array\n            .map(row => [row.get('date').getTime(), row.get(columnKey)]);\n    }\n\n\n    /**\n     * Update heights on all charts: from relative values (1 is highest possible) to percentage\n     * values (based on total height of all charts)\n     * @private\n     */\n    updateHeights() {\n        const relativeSpace = 0.1;\n        // Only get totalChartHeight once: afterwards we update chart.height to a string (e.g.\n        // '50%', adding up won't work any more); add 0.05 for spacing between charts\n        const totalHeight = this.getTotalChartHeight() + this.charts.length * relativeSpace;\n        // Update heights (from relations to percentages); previous value is used as top position\n        // of current chart\n        const percentageBasedSpace = relativeSpace / totalHeight;\n        this.charts.reduce((topPosition, chart) => {\n            const height = chart.height / totalHeight;\n            debug('Height %o of total %o, was %o', chart.height, totalHeight, chart.height);\n            chart.height = Math.floor(height * 100) + '%';\n            chart.top = Math.floor(topPosition * 100 + percentageBasedSpace) + '%';\n            return topPosition + height + percentageBasedSpace;\n        }, 0);\n\n    }\n\n\n    /**\n     * Write data as JSON to file system\n     */\n    async writeData() {\n        const highstockData = {\n            series: this.series,\n            yAxis: this.charts,\n        };\n        const filePath = path.join(this.basePath, `${this.name}.json`);\n        const fileContent = JSON.stringify(highstockData, null, 2);\n        debug('Store JSON to', filePath);\n        const writeFile = util.promisify(fs.writeFile);\n        await writeFile(filePath, fileContent);\n    }\n\n}\n\n\n"],"file":"HighChartsExporter.mjs"}