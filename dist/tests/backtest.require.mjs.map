{"version":3,"sources":["../../src/tests/backtest.require.mjs"],"names":["path","del","fs","test","compareDir","Backtest","CSVSource","Algorithm","performanceIndicators","indicators","logger","ProfitFactor","Cagr","Sma","Stoch","debug","info","clearDirectory","output","join","__dirname","sync","mkdirSync","SMAAlgo","constructor","field","fastSMA","slowSMA","fastSMALength","Math","round","slowSMALength","handleNewInstrument","instrument","name","addTransformer","fastSMAKey","slowSMAKey","handleClose","orders","instruments","newOrders","Map","data","length","fast","head","get","slow","prevFast","prevSlow","includes","undefined","set","size","newOrderArray","order","push","StochIndicators","args","periods","stoch_k","stochKKey","stoch_d","stochDKey","EqualPositionSize","Promise","resolve","setTimeout","random","newPositions","position","getCurrentPositions","moneyAvailable","backtest","accounts","moneyPerPosition","targetPositions","direction","close","floor","targetSize","previousSize","has","ordersForLog","pos","runTest","dataSource","setDataSource","addPerformanceIndicators","addOptimization","config","Date","setConfiguration","setStrategy","params","run","save","t","result","compareSync","compareContent","console","log","is","differences"],"mappings":"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","sourcesContent":["// Global integration test. All library specific tests are where the libraries are.\n\nimport path from 'path';\nimport del from 'del';\nimport fs from 'fs';\nimport test from 'ava';\nimport compareDir from 'dir-compare';\nimport Backtest, { CSVSource, Algorithm, performanceIndicators, indicators } from '../../index.mjs';\nimport logger from '../logger/logger.mjs';\n/* import {\n    formatDate,\n    formatOrders,\n} from '../helpers/formatLogs'; */\n\nconst { ProfitFactor, Cagr } = performanceIndicators;\nconst { Sma, Stoch } = indicators;\n\nconst { debug, info } = logger('WalkForward:BacktestTest');\n\nfunction clearDirectory() {\n    const output = path.join(__dirname, 'test-data', 'output');\n    del.sync(output);\n    fs.mkdirSync(output);\n}\n\n\n\nclass SMAAlgo extends Algorithm {\n\n    // Better: Use Symbol(); issue: name doesn't look nice when they're\n    // exported/saved\n    fastSMAKey = 'fastSma';\n    slowSMAKey = 'slowSma';\n\n    constructor(field, fastSMA, slowSMA) {\n        super();\n        debug('SMAAlgo: Init with %s %d %d, is %o', field, fastSMA, slowSMA, this);\n        this.field = field;\n        // Params are floats â€“ convert them to ints\n        this.fastSMALength = Math.round(fastSMA, 10);\n        this.slowSMALength = Math.round(slowSMA, 10);\n    }\n\n    handleNewInstrument(instrument) {\n        debug(\n            'SMAAlgo: Instrument %o added; fast is %d, slow %d',\n            instrument.name,\n            this.fastSMALength,\n            this.slowSMALength,\n        );\n        instrument.addTransformer(\n            [this.field],\n            new Sma(this.fastSMALength),\n            this.fastSMAKey,\n        );\n        instrument.addTransformer(\n            [this.field],\n            new Sma(this.slowSMALength),\n            this.slowSMAKey,\n        );\n    }\n\n\n    handleClose(orders, instruments) {\n\n        // Clone orders\n        const newOrders = new Map(orders);\n\n        for (const instrument of instruments) {\n            debug('onClose, orders are %o, instrument is %o', orders, instrument);\n            // We need at least 2 data sets to look back\n            if (instrument.data.length < 2) continue;\n            const fast = instrument.head().get(this.fastSMAKey);\n            const slow = instrument.head().get(this.slowSMAKey);\n            const prevFast = instrument.head(1, 1).get(this.fastSMAKey);\n            const prevSlow = instrument.head(1, 1).get(this.slowSMAKey);\n            info(\n                '%s: fast %d slow %d prevFast %d prevSlow %d',\n                instrument.name,\n                fast,\n                slow,\n                prevFast,\n                prevSlow,\n            );\n            // If any value is missing, return\n            if ([slow, fast, prevSlow, prevFast].includes(undefined)) continue;\n            // Cross-over: Buy\n            else if (fast > slow && prevFast <= prevSlow) {\n                debug('SMA: Create order for %o', instrument.name);\n                newOrders.set(instrument, { size: 1 });\n            }\n            // Cross-under: Short\n            else if (fast < slow && prevFast >= prevSlow) {\n                debug('SMA: Create order for %o', instrument.name);\n                newOrders.set(instrument, { size: -1 });\n            }\n\n        }\n\n        // Just log nicely\n        const newOrderArray = [];\n        for (const [instrument, order] of newOrders) {\n            newOrderArray.push(`${instrument.name}:${order.size}`);\n        }\n        info('Orders in SMAAlgo are', (newOrderArray.length ? newOrderArray.join(', ') : 'â€”'));\n\n        return newOrders;\n\n    }\n\n}\n\n\n// Stoch indicators to\n// a) test export of multi-return-value indicator\n// c) test runThrough\nclass StochIndicators extends Algorithm {\n\n    stochKKey = 'stoch_K'; // Should use Symbol()\n    stochDKey = 'stoch_D';\n\n    /**\n     * Params: k, k slowing factor and d slowing factor\n     */\n    constructor(...args) {\n        super();\n        this.periods = args;\n    }\n\n    handleNewInstrument(instrument) {\n        instrument.addTransformer(\n            ['high', 'low', 'close'],\n            new Stoch(this.periods[0], this.periods[1], this.periods[2]),\n            { stoch_k: this.stochKKey, stoch_d: this.stochDKey },\n        );\n\n    }\n\n}\n\n\n\n/**\n * Allocates every instrument the same amount of money; if a strategy has 5 instruments and a\n * cash pile of 100k, every instrument gets 20k.\n */\nclass EqualPositionSize extends Algorithm {\n\n    async handleClose(orders) {\n\n        // Make it async â€“ just to test\n        await new Promise(resolve => setTimeout(resolve), Math.random() * 20);\n\n        // Don't rebalance daily â€“ only calculate sizes when orders are available\n        if (!orders.size) return orders;\n\n        // Map with key: instrument, value: 1 for long or -1 for short for all orders *AND*\n        // current positions (will rebalance)!\n        const newPositions = new Map();\n        for (const [instrument, position] of this.getCurrentPositions()) {\n            newPositions.set(instrument, position.size > 0 ? 1 : -1);\n        }\n        // If needed, overwrite positions with orders\n        for (const [instrument, position] of orders) {\n            newPositions.set(instrument, position.size);\n        }\n\n\n        // Current money available (cash + invested)\n        const moneyAvailable = this.backtest.accounts.head().get('cash') +\n            this.backtest.accounts.head().get('invested');\n\n        info('Accounts is %o', this.backtest.accounts.head());\n\n        // Money that is available per position (every position gets the same amount)\n        // 0.9: Keep some cash/prices may change from close to open\n        const moneyPerPosition = (moneyAvailable / newPositions.size) * 0.9;\n        info('Money available is %d, per position %d', moneyAvailable, moneyPerPosition);\n\n        // Get target positions; key: instrument, value: size\n        const targetPositions = new Map();\n        for (const [instrument, direction] of newPositions) {\n            const close = instrument.head().get('close');\n            const size = Math.floor(moneyPerPosition / close);\n            targetPositions.set(instrument, size * direction);\n            info(\n                '%s. Target position is %d, close is %d',\n                instrument.name,\n                size,\n                close,\n            );\n        }\n        // console.log('targetPositions', targetPositions);\n\n        const newOrders = new Map();\n        for (const [instrument, targetSize] of targetPositions) {\n            const previousSize = this.getCurrentPositions().has(instrument) ?\n                this.getCurrentPositions().get(instrument).size : 0;\n            // console.log('previousSize', previousSize, targetSize);\n            const size = targetSize - previousSize;\n            info(\n                '%s: Target size %d, previous size %d, order size %d',\n                instrument.name,\n                targetSize,\n                previousSize,\n                size,\n            );\n            newOrders.set(instrument, { size });\n        }\n        // console.log('newOrders', newOrders);\n\n        const ordersForLog = [];\n        for (const [instrument, pos] of newOrders) {\n            ordersForLog.push({ instrument: instrument.name, size: pos.size });\n        }\n        // console.log('Orders are', ordersForLog);\n\n        return newOrders;\n\n    }\n}\n\n\n\n\nasync function runTest() {\n\n    // Has stream, accounts, optimizations\n    const backtest = new Backtest();\n\n    const dataSource = new CSVSource([path.join(__dirname, 'test-data/input/*.csv')]);\n    backtest.setDataSource(dataSource);\n    backtest.addPerformanceIndicators(new ProfitFactor());\n    backtest.addPerformanceIndicators(new Cagr());\n\n    backtest.addOptimization('slowSMA', [1, 3], 3);\n    backtest.addOptimization('fastSMA', [2, 4], 3);\n\n    const config = new Map([\n        ['cash', 10000],\n        // CAREFUL: Use strings as constructor argument because we do the same when reading data\n        // from our CSVs. Strings are GMT-based while numbers are based on the local time zone!\n        ['startDate', new Date('2018-01-01')],\n        ['endDate', new Date('2018-01-20')],\n    ]);\n    backtest.setConfiguration(config);\n\n    backtest.setStrategy(params => [\n        new StochIndicators(3, 1, 2),\n        new SMAAlgo('close', params.get('fastSMA'), params.get('slowSMA')),\n        // new SMAAlgo('close', 2, 3),\n        new EqualPositionSize(),\n    ]);\n\n    await backtest.run();\n    await backtest.save(path.join(__dirname, 'test-data/output'));\n\n}\n\n/*\nExpected results for slow: 3, fast: 2\nFirst and last date of amzn are out of date bounds (see config's startDate and endDate)\n\nDate    Aapl          Amzn\n        Slow  Fast     Slow  Fast   Signals\n1       -     -        -     -\n2       -     11       -     21\n3       10.7  10       20.7  20\n4       -     -        20.3  20.5   Amzn cross-over\n5       10.3  10.5     20.7  21     Aapl cross-over\n6       10.7  11       -     -\n7       11.7  12       21.7  22\n8       -     -        -     -\n9       12.7  13.5     22.7  23.5\n10      13    13       23    23\n11      13    12.5     23    22.5   Aapl & Amzn cross-under\n12      13    13.5     21    20.5   Aapl cross-over\n13      -     -        -     -\n14      13    13       19.3  17.5\n15      13    12.5     17    16.5   Aapl cross-under\n16      12.3  12.5     -     -      Aapl cross-over\n17      -     -        -     -\n18      11.3  10.5     -     -\n19      9.7   8.5      -     -      Aapl cross-under\n20      7.7   7        -     -\n\nOrders\nDate\n5    428 Amzn\n     Amzn c@21 (on 4), cash 10k, 90% = 9k/21 = 428\n     Pos value is 428 * 22 = 9416, cash therefore 584\n6    Aapl has no data to execute order from 5th (EOD)\n12   Aapl -360, Amzn -204\n     Money: Amzn c@23 (on 11) = 584 cash + 9844 = 10428 total = 5214 per position * 0.9 = 4692.6\n     Aapl c@13 (on 11) = -360; Amzn c@18 = -204\n     Old cash is 584. Sold 428 Amzn@18 -> + 7704\n     Shorted 360 Aapl@12, shorted 204 Amzn@18; cost = 4320 + 3672\n     New cash is 296\n13   As there is no data on both Aapl and Amzn, orders will be handled regularily on 14th\n14   Aapl 243, Amzn -189\n     Money: Cash 296\n            + -360 Aapl c@14 (on 12), shortened@12 = 3600\n            + -204 Amzn c@18 (on 12), shortened@18 = 3672\n            = 7568 * 0.9 / 2 = 3405.6 per position\n     Aapl@14 = 243, Amzn@18 = -189\n     Old cash 296. Covered 360 Aapl@11 (from 12) = 296 + 4680\n     Bought 243 Aapl@11 = -2673\n     Covered 15 Amzn@17 (from 18) = 285\n     Total cash: 2588\n16   Aapl -329\n     Money: Cash 2588 + (243 Aapl@13 = 3159) + (-189 Amzn@16 (from 18) = 3780) = 9527\n     4287.15 per position. No data for Amzn. Aapl@13, shorten 329\n     Old cash 2588, sold 243 Aapl@10 = +2430, shortened 329 Aapl@10 = -3290\n     New cash = 1728\n19   Should not bring any news â€¦\n\nâ€¦ WORKS!\n\n */\n\n\n\ntest('outputs correct results', async(t) => {\n    clearDirectory();\n    await runTest();\n\n    const result = compareDir.compareSync(\n        path.join(__dirname, 'test-data/output'),\n        path.join(__dirname, 'test-data/expected-output'),\n        { compareContent: true },\n    );\n\n    console.log('result', result);\n    t.is(result.differences, 0);\n\n});\n\n\n\n"],"file":"backtest.require.mjs"}