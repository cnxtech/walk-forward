{"version":3,"sources":["../../src/backtest-config/validateBacktestConfig.mjs"],"names":["validateBacktestConfig","config","template","Map","Error","key","keyConfig","optional","get","has","console","debug","Array","from","keys","join","testFunction","test","undefined","testResult","testFailedMessage","validatedConfig","Object","prototype","hasOwnProperty","call","set","default"],"mappings":"AAAA,eAAe,SAASA,sBAAT,CAAgCC,MAAhC,EAAwCC,QAAxC,EAAkD;AAE7D,MAAI,EAAED,MAAM,YAAYE,GAApB,KAA4B,EAAED,QAAQ,YAAYC,GAAtB,CAAhC,EAA4D;AACxD,UAAM,IAAIC,KAAJ,CAAW,8EAA6EH,MAAO,QAAOC,QAAS,GAA/G,CAAN;AACH,GAJ4D,CAM7D;;;AACA,OAAK,MAAM,CAACG,GAAD,EAAMC,SAAN,CAAX,IAA+BJ,QAA/B,EAAyC;AACrC,QAAI,CAACI,SAAS,CAACC,QAAX,IAAuB,CAACN,MAAM,CAACO,GAAP,CAAWH,GAAX,CAA5B,EAA6C;AACzC,YAAM,IAAID,KAAJ,CAAW,+BAA8BC,GAAI,2EAA7C,CAAN;AACH;AACJ,GAX4D,CAc7D;;;AACA,OAAK,MAAM,CAACA,GAAD,EAAMC,SAAN,CAAX,IAA+BL,MAA/B,EAAuC;AAGnC;AACA,QAAI,CAACC,QAAQ,CAACO,GAAT,CAAaJ,GAAb,CAAL,EAAwB;AACpBK,MAAAA,OAAO,CAACC,KAAR,CAAe,kEAAiEN,GAAI,qBAAoBO,KAAK,CAACC,IAAN,CAAWX,QAAQ,CAACY,IAAT,EAAX,EAA4BC,IAA5B,CAAiC,IAAjC,CAAuC,GAA/I;AACH,KAFD,CAIA;AAJA,SAKK;AACD,cAAMC,YAAY,GAAGd,QAAQ,CAACM,GAAT,CAAaH,GAAb,EAAkBY,IAAvC;;AACA,YAAID,YAAY,KAAKE,SAArB,EAAgC;AAC5B,cAAI,OAAOF,YAAP,KAAwB,UAA5B,EAAwC;AACpC,kBAAM,IAAIZ,KAAJ,CAAW,6EAA4EC,GAAI,0BAAyB,OAAOW,YAAa,GAAxI,CAAN;AACH;;AACD,gBAAMG,UAAU,GAAGH,YAAY,CAACV,SAAD,CAA/B;;AACA,cAAI,CAACa,UAAL,EAAiB;AACb,kBAAM,IAAIf,KAAJ,CAAW,0CAAyCC,GAAI,mDAAkDH,QAAQ,CAACM,GAAT,CAAaH,GAAb,EAAkBe,iBAAkB,EAA9I,CAAN;AACH;AACJ;AACJ;AACJ;;AAED,QAAMC,eAAe,GAAG,IAAIlB,GAAJ,EAAxB;;AAEA,OAAK,MAAM,CAACE,GAAD,EAAMC,SAAN,CAAX,IAA+BJ,QAA/B,EAAyC;AACrC;AACA,QAAI,CAACD,MAAM,CAACQ,GAAP,CAAWJ,GAAX,CAAL,EAAsB;AAClB;AACA,UAAIiB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCnB,SAArC,EAAgD,SAAhD,CAAJ,EAAgE;AAC5De,QAAAA,eAAe,CAACK,GAAhB,CAAoBrB,GAApB,EAAyBC,SAAS,CAACqB,OAAnC;AACH;AACJ,KALD,MAMK;AACDN,MAAAA,eAAe,CAACK,GAAhB,CAAoBrB,GAApB,EAAyBJ,MAAM,CAACO,GAAP,CAAWH,GAAX,CAAzB;AACH;AAGJ;;AAED,SAAOgB,eAAP;AAEH","sourcesContent":["export default function validateBacktestConfig(config, template) {\n\n    if (!(config instanceof Map) || !(template instanceof Map)) {\n        throw new Error(`validateBacktestConfig: Config and config template must both be a Map, are ${config} and ${template}.`);\n    }\n\n    // Check that every mandatory key from template is provided in config\n    for (const [key, keyConfig] of template) {\n        if (!keyConfig.optional && !config.get(key)) {\n            throw new Error(`validateBacktestConfig: Key ${key} is mandatory for config, you did not pass a configuration with this key.`);\n        }\n    }\n\n\n    // Go through config\n    for (const [key, keyConfig] of config) {\n\n\n        // Key does not exist in template: display a warning, might be a typo\n        if (!template.has(key)) {\n            console.debug(`WARNING: You passed a config key that contains an unknown key (${key}). Valid keys are ${Array.from(template.keys()).join(', ')}.`);\n        }\n\n        // Test validity\n        else {\n            const testFunction = template.get(key).test;\n            if (testFunction !== undefined) {\n                if (typeof testFunction !== 'function') {\n                    throw new Error(`validateBacktestConfig: test property provided in config template for key ${key} is not a function but ${typeof testFunction}.`);\n                }\n                const testResult = testFunction(keyConfig);\n                if (!testResult) {\n                    throw new Error(`validateBacktestConfig: config for key ${key} did not pass validity test of config template: ${template.get(key).testFailedMessage}`);\n                }\n            }\n        }\n    }\n\n    const validatedConfig = new Map();\n\n    for (const [key, keyConfig] of template) {\n        // Use default if provided and if value is missing\n        if (!config.has(key)) {\n            // Only add default if it's present on the template\n            if (Object.prototype.hasOwnProperty.call(keyConfig, 'default')) {\n                validatedConfig.set(key, keyConfig.default);\n            }\n        }\n        else {\n            validatedConfig.set(key, config.get(key));\n        }\n\n\n    }\n\n    return validatedConfig;\n\n}\n\n"],"file":"validateBacktestConfig.mjs"}