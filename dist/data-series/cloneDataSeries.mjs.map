{"version":3,"sources":["../../src/data-series/cloneDataSeries.mjs"],"names":["cloneDataSeries","DataSeries","source","transformer","columnKeyTransformer","dataSeries","row","data","transformedRow","Map","column","content","newColumnKey","set","add"],"mappings":"AAAA;;;;;;;;;;;;;;AAcA,eAAe,SAASA,eAAT,CAAyBC,UAAzB,EAAqCC,MAArC,EAA6CC,WAA7C,EAA0DC,oBAA1D,EAAgF;AAE3F,QAAMC,UAAU,GAAG,IAAIJ,UAAJ,EAAnB;;AAEA,OAAK,MAAMK,GAAX,IAAkBJ,MAAM,CAACK,IAAzB,EAA+B;AAC3B,UAAMC,cAAc,GAAG,IAAIC,GAAJ,EAAvB;;AACA,SAAK,MAAM,CAACC,MAAD,EAASC,OAAT,CAAX,IAAgCL,GAAhC,EAAqC;AACjC,YAAMM,YAAY,GAAGR,oBAAoB,GAAGA,oBAAoB,CAACM,MAAD,CAAvB,GAAkCA,MAA3E;AACA,UAAIP,WAAJ,EAAiBK,cAAc,CAACK,GAAf,CAAmBD,YAAnB,EAAiCT,WAAW,CAACO,MAAD,EAASJ,GAAT,EAAcK,OAAd,CAA5C,EAAjB,KACKH,cAAc,CAACK,GAAf,CAAmBD,YAAnB,EAAiCD,OAAjC;AACR;;AACDN,IAAAA,UAAU,CAACS,GAAX,CAAeN,cAAf;AACH;;AAED,SAAOH,UAAP;AAEH","sourcesContent":["/**\n * Clones and transforms a data series (see DataSeries.from)\n * @πaram {Object} DataSeries               Original DataSeries class; if we import it here, we have\n *                                          a circular import (import cloneDataSeries in DataSeries\n *                                          and import DataSeries in cloneDataSeries) which will\n *                                          lead to a different «instance» of DataSeries here.\n *                                          instanceof won't work any more.\n * @param {DataSeries} dataSeries\n * @param {function} transformer            Function that takes 3 arguments: column, row, cell and\n *                                          returns new cell value\n * @param {function} columnKeyTransformer   Function to transform column key; takes a single\n *                                          argument (current key)\n * @return {DataSeries}\n */\nexport default function cloneDataSeries(DataSeries, source, transformer, columnKeyTransformer) {\n\n    const dataSeries = new DataSeries();\n\n    for (const row of source.data) {\n        const transformedRow = new Map();\n        for (const [column, content] of row) {\n            const newColumnKey = columnKeyTransformer ? columnKeyTransformer(column) : column;\n            if (transformer) transformedRow.set(newColumnKey, transformer(column, row, content));\n            else transformedRow.set(newColumnKey, content);\n        }\n        dataSeries.add(transformedRow);\n    }\n\n    return dataSeries;\n\n}\n"],"file":"cloneDataSeries.mjs"}