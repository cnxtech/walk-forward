{"version":3,"sources":["../../src/data-series/ViewableDataSeries.mjs"],"names":["TransformableDataSeries","ViewableDataSeries","chart","Map","addTransformer","properties","transformer","keys","getChartConfig","undefined","config","console","log","Error","series","Object","forEach","key","viewConfig","set"],"mappings":";;AAAA,OAAOA,uBAAP,MAAoC,+BAApC;AAEA;;;;AAGA,eAAe,MAAMC,kBAAN,SAAiCD,uBAAjC,CAAyD;AAAA;AAAA;;AAAA,wCAWvD;AAAEE,MAAAA,KAAK,EAAE,IAAIC,GAAJ;AAAT,KAXuD;AAAA;;AAapE;;;;;;;;;AASAC,EAAAA,cAAc,CAACC,UAAD,EAAaC,WAAb,EAA0BC,IAA1B,EAAgC;AAC1C,UAAMH,cAAN,CAAqBC,UAArB,EAAiCC,WAAjC,EAA8CC,IAA9C;;AAEA,QACI,OAAOD,WAAW,CAACE,cAAnB,KAAsC,UAAtC,IACAF,WAAW,CAACE,cAAZ,OAAiCC,SAFrC,EAGE;AACE;AACH;;AAED,UAAMC,MAAM,GAAGJ,WAAW,CAACE,cAAZ,EAAf,CAV0C,CAY1C;;AACA,QAAI,OAAOE,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,IAA7C,EAAmD;AAC/CC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,MAAzB;AACA,YAAM,IAAIG,KAAJ,CAAW;mCACM,OAAOH,MAAO,EAD/B,CAAN;AAEH,KAjByC,CAkB1C;;;AACA,QAAIA,MAAM,CAACR,KAAP,KAAiBO,SAArB,EAAgC;AAC5B,UAAI,OAAOC,MAAM,CAACR,KAAd,KAAwB,QAAxB,IAAoCQ,MAAM,CAACR,KAAP,KAAiB,IAAzD,EAA+D;AAC3D,cAAM,IAAIW,KAAJ,CAAW;wDACuB,OAAOH,MAAM,CAACR,KAAM,GADtD,CAAN;AAEH;AACJ,KAxByC,CAyB1C;;;AACA,QAAIQ,MAAM,CAACI,MAAP,KAAkBL,SAAtB,EAAiC;AAC7B,UAAI,OAAOF,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C;AAC3C,YAAI,OAAOG,MAAM,CAACI,MAAd,KAAyB,QAAzB,IAAqCJ,MAAM,CAACI,MAAP,KAAkB,IAA3D,EAAiE;AAC7D,gBAAM,IAAID,KAAJ,CAAW;;wDAEmB,OAAOH,MAAM,CAACI,MAAO,GAFnD,CAAN;AAGH;AACJ,OAND,MAMO;AACH,YAAIJ,MAAM,CAACI,MAAP,KAAkB,IAAlB,IAA0B,OAAOJ,MAAM,CAACI,MAAd,KAAyB,QAAvD,EAAiE;AAC7D,gBAAM,IAAID,KAAJ,CAAW;;wDAEmB,OAAOH,MAAM,CAACI,MAAO,GAFnD,CAAN;AAGH;AACJ;AACJ,KAxCyC,CA0C1C;;;AACA,QAAI,OAAOP,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C;AAC3C;AACAQ,MAAAA,MAAM,CAACR,IAAP,CAAYA,IAAZ,EAAkBS,OAAlB,CAA2BC,GAAD,IAAS;AAC/B;AACA;AACA,aAAKC,UAAL,CAAgBhB,KAAhB,CAAsBiB,GAAtB,CAA0BZ,IAAI,CAACU,GAAD,CAA9B,EAAqC;AACjCH,UAAAA,MAAM,EAAEJ,MAAM,CAACI,MAAP,CAAcG,GAAd,CADyB;AAEjCf,UAAAA,KAAK,EAAEQ,MAAM,CAACR;AAFmB,SAArC;AAIH,OAPD;AAQH,KAVD,CAWA;AAXA,SAYK;AACD,aAAKgB,UAAL,CAAgBhB,KAAhB,CAAsBiB,GAAtB,CAA0BZ,IAA1B,EAAgC;AAC5BO,UAAAA,MAAM,EAAEJ,MAAM,CAACI,MADa;AAE5BZ,UAAAA,KAAK,EAAEQ,MAAM,CAACR;AAFc,SAAhC;AAIH;AAEJ;;AApFmE","sourcesContent":["import TransformableDataSeries from './TransformableDataSeries.mjs';\n\n/**\n * Extends a TransformableDataSeries with view options (configuration to display charts)\n */\nexport default class ViewableDataSeries extends TransformableDataSeries {\n\n    /**\n     * @type {object}\n     * May contain view configs for charts, tables, etc.\n     * Chart is a map with\n     * - key:   name of column (e.g. a Symbol)\n     * - value: object with props chart and series; chart may be contained in multiple entries of\n     *          this map!\n     */\n\n    viewConfig = { chart: new Map() };\n\n    /**\n     * Overwrite addTransformer method: Extract chartConfig from transformer and store it in\n     * this.viewConfig\n     * TODO: Allow users to overwrite chartConfig data as a 4th argument to addTransformer\n     * @param properties            see TransformableDataSeries\n     * @param {object} transformer  Transformer that might also have a getChartConfig method which\n     *                              returns the view config data.\n     * @param keys                  see TransformableDataSeries\n     */\n    addTransformer(properties, transformer, keys) {\n        super.addTransformer(properties, transformer, keys);\n\n        if (\n            typeof transformer.getChartConfig !== 'function' ||\n            transformer.getChartConfig() === undefined\n        ) {\n            return;\n        }\n\n        const config = transformer.getChartConfig();\n\n        // Check object returned by getChartConfig\n        if (typeof config !== 'object' || config === null) {\n            console.log('config is', config);\n            throw new Error(`ViewableDataSeries: Type of value returned by getChartConfig() must\n                be an object, is ${typeof config}`);\n        }\n        // Check config.chart\n        if (config.chart !== undefined) {\n            if (typeof config.chart !== 'object' || config.chart === null) {\n                throw new Error(`ViewableDataSeries: If getChartConfig() on a transformer returns\n                    a chart, it must be an object, is ${typeof config.chart}.`);\n            }\n        }\n        // config.series is present: Check if it's valid\n        if (config.series !== undefined) {\n            if (typeof keys === 'object' && keys !== null) {\n                if (typeof config.series !== 'object' || config.series === null) {\n                    throw new Error(`ViewableDataSeries: If getChartConfig() on a transformer \n                        returns a property 'series', it must be an object if keys passed to  \n                        transformer are an object, is ${typeof config.series}.`);\n                }\n            } else {\n                if (config.series === null || typeof config.series !== 'object') {\n                    throw new Error(`ViewableDataSeries: If getChartConfig() on a transformer\n                        returns a property 'series', it must be an object if keys passed to\n                        transformer are not a Map, is ${typeof config.series}.`);\n                }\n            }\n        }\n\n        // transformer returns an object\n        if (typeof keys === 'object' && keys !== null) {\n            // Transformer returns multi-value\n            Object.keys(keys).forEach((key) => {\n                // key is the original name (in the transformer), therefore keys[key] is the new\n                // name of the col in the series\n                this.viewConfig.chart.set(keys[key], {\n                    series: config.series[key],\n                    chart: config.chart,\n                });\n            });\n        }\n        // transformer returns a single value\n        else {\n            this.viewConfig.chart.set(keys, {\n                series: config.series,\n                chart: config.chart,\n            });\n        }\n\n    }\n\n}\n\n"],"file":"ViewableDataSeries.mjs"}